@page "/scale-page"

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
     width="@WindowSizeSingleton.Width" height="@WindowSizeSingleton.Height">
    <rect width="100%" height="100%" fill="pink" fill-opacity="20%" />

    @if (WindowSizeSingleton.IsPortrait)
    {
        <!--Close-->
        <svg width="@closeWidth" height="@closeHeight" x="@closeX" y="@closeY" viewBox="0 0 32 32" fill="gray">
            <path d="M16 0c-8.836 0-16 7.163-16 16s7.163 16 16 16c8.837 0 16-7.163 16-16s-7.163-16-16-16zM16 30.032c-7.72 0-14-6.312-14-14.032s6.28-14 14-14 14 6.28 14 14-6.28 14.032-14 14.032zM21.657 10.344c-0.39-0.39-1.023-0.39-1.414 0l-4.242 4.242-4.242-4.242c-0.39-0.39-1.024-0.39-1.415 0s-0.39 1.024 0 1.414l4.242 4.242-4.242 4.242c-0.39 0.39-0.39 1.024 0 1.414s1.024 0.39 1.415 0l4.242-4.242 4.242 4.242c0.39 0.39 1.023 0.39 1.414 0s0.39-1.024 0-1.414l-4.242-4.242 4.242-4.242c0.391-0.391 0.391-1.024 0-1.414z"></path>
        </svg>
    }
    else
    {
        <!--Close-->
        <svg width="@closeWidth" height="@closeHeight" x="@closeX" y="@closeY" viewBox="0 0 32 32" fill="red">
            <path d="M16 0c-8.836 0-16 7.163-16 16s7.163 16 16 16c8.837 0 16-7.163 16-16s-7.163-16-16-16zM16 30.032c-7.72 0-14-6.312-14-14.032s6.28-14 14-14 14 6.28 14 14-6.28 14.032-14 14.032zM21.657 10.344c-0.39-0.39-1.023-0.39-1.414 0l-4.242 4.242-4.242-4.242c-0.39-0.39-1.024-0.39-1.415 0s-0.39 1.024 0 1.414l4.242 4.242-4.242 4.242c-0.39 0.39-0.39 1.024 0 1.414s1.024 0.39 1.415 0l4.242-4.242 4.242 4.242c0.39 0.39 1.023 0.39 1.414 0s0.39-1.024 0-1.414l-4.242-4.242 4.242-4.242c0.391-0.391 0.391-1.024 0-1.414z"></path>
        </svg>
    }

    <!-- Diagnostics -->
    <svg x="10" y="10" fill="black" height="170" width="250">
        <rect width="100%" height="100%" fill="#dcdcdc" />
        <text x="0" y="20">@string.Format($"Window Width:  {WindowSizeSingleton.Width}")</text>
        <text x="0" y="40">@string.Format($"Window Height: {WindowSizeSingleton.Height}")</text>
        <text x="0" y="60">@string.Format($"Ratio: {Ratio}")</text>
        <text x="0" y="80">@string.Format($"Is Portrait: {WindowSizeSingleton.IsPortrait}")</text>
        <text x="0" y="100">@string.Format($"Close Width: {closeWidth}")</text>
        <text x="0" y="120">@string.Format($"Close Height: {closeHeight}")</text>
        <text x="0" y="140">@string.Format($"Close X: {closeX}")</text>
        <text x="0" y="160">@string.Format($"Close Y: {closeY}")</text>
    </svg>

</svg>

@layout BlankLayout
@implements IDisposable
@inject IWindowSize WindowSizeSingleton

@code
{
    private double closeXDesign = 2918;
    private double closeYDesign = 0;
    private double closeWidthDesign = 170;
    private double closeHeightDesign = 170;

    private double closeX;
    private double closeY;
    private double closeWidth;
    private double closeHeight;

    private double Ratio = 1;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        WindowSizeSingleton.PropertyChanged += OnWindowSizeSingleton; // TODO: can we move this into the Layout page? Window resize and orientaion change
        App.Current.MainPage.SizeChanged += OnSizeChanged;
    }

    private async void OnSizeChanged(object o, EventArgs e)
    {
        EnsureRightDesingValues();
        Ratio = CalculateRatio();
        EnsureDefaults();

        await InvokeAsync(StateHasChanged);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            return;
        }
    }

    private async void OnWindowSizeSingleton(object? sender, EventArgs e)
    {
        EnsureRightDesingValues();
        Ratio = CalculateRatio();
        EnsureDefaults();

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        WindowSizeSingleton.PropertyChanged -= OnWindowSizeSingleton;
    }

    private void EnsureRightDesingValues()
    {
        closeWidthDesign = 170;
        closeHeightDesign = 170;

        // if (WindowSizeSingleton.IsPortrait)
        // {
        //     closeXDesign = 1270;
        //     closeYDesign = 0;
        // }
        // else
        // {
        //     closeXDesign = 2918;
        //     closeYDesign = 0;
        // }

        closeXDesign = 2918;
        closeYDesign = 0;
    }

    const double portraitDesignWidth = 1440D;
    const double portraitDesignHeight = 3088D;

    private double CalculateRatio()
    {
        var designWidth = portraitDesignHeight;// WindowSizeSingleton.IsPortrait ? portraitDesignWidth : portraitDesignHeight;
        var ratio = WindowSizeSingleton.Width / designWidth;
        return ratio;
    }

    private void EnsureDefaults()
    {
        closeX = Ratio * closeXDesign;
        closeY = Ratio * closeYDesign;

        var x = closeWidthDesign / portraitDesignWidth;
        var y = closeHeightDesign / portraitDesignHeight;

        closeWidth = Ratio * closeWidthDesign;
        closeHeight = Ratio * closeHeightDesign;

        // closeWidth = (x * portraitDesignWidth) * Ratio;
        // closeHeight = (y * portraitDesignHeight) * Ratio;
    }
}