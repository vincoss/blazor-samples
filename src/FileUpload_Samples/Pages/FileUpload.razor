@page "/fileUpload"
@using System.Linq
@using System.Net.Http.Headers
@using Microsoft.Extensions.Logging
@using System.Net.Http;
@using System.Text.Json
@using System.Net
@inject HttpClient Http
@inject ILogger<FileUpload> Logger
@inject IHttpClientFactory ClientFactory

<h1>Upload Files</h1>

<p>
    <label>
        Upload up to @_maxAllowedFiles files:
        <InputFile type="file" OnChange="@OnInputFileChange" multiple />

        <!--
            accept=".csv,.xlsx" 

        -->
    </label>
</p>

@if (_filesToUpload.Count > 0)
{
    <div class="card">
        <div class="card-body">
            <ul>
                @foreach (var file in _filesToUpload)
                {
                    <li>
                        File: @file.Name
                        <br>
                        @if (FileUploadMethod(_uploadResults, file.Name, Logger, out var result))
                        {
                            <span>
                                Stored File Name: @result.StoredFileName
                            </span>
                        }
                        else
                        {
                            <span>
                                There was an error uploading the file
                                (Error: @result.ErrorMessage).
                            </span>
                        }
                    </li>
                }
            </ul>
        </div>
    </div>
}

@code {
    private List<File> _filesToUpload = new();
    private List<UploadResult> _uploadResults = new();
    private int _maxAllowedFiles = 30;
    private const long MaxFileSize = long.MaxValue;

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {

        _uploadResults = new();
        var upload = false;
        using var content = new MultipartFormDataContent(Guid.NewGuid().ToString());
      //  content.Headers.ContentType.MediaType = "multipart/form-data";
        var url = "https://localhost:5001/FilesaveLargeOther";

        try
        {

            foreach (var file in e.GetMultipleFiles(_maxAllowedFiles))
            {
                Logger.LogInformation($"Begin prepare file: {file.Name}");

                var client = ClientFactory.CreateClient();
                client.Timeout = TimeSpan.FromDays(1);

                //using (var fileStream = file.OpenReadStream(MaxFileSize))
                //{
                //    var fileContent = new StreamContent(fileStream);
                //    fileContent.Headers.Add("Content-Disposition", $"form-data; name=\"files\"; filename=\"{file.Name}\"");
                //    fileContent.Headers.Add("Content-Type", "application/octet-stream");
                //    var response = await client.PostAsync(url, fileContent).ConfigureAwait(false);
                //    response.EnsureSuccessStatusCode();
                //}


                try
                {
                    var mimeType = GetMimeType(file);
                    var fileContent = new StreamContent(file.OpenReadStream(MaxFileSize), 2048);

                    //string boundary = Guid.NewGuid().ToString();
                    //content.Headers.Remove("Content-Type"); 
                    //content.Headers.TryAddWithoutValidation("Content-Type", "application/octet-stream; boundary=" + boundary);

                    fileContent.Headers.ContentType = new MediaTypeHeaderValue("application/octet-stream");
                    //fileContent.Headers.ContentType = new MediaTypeHeaderValue(mimeType);

                    _filesToUpload.Add(new() { Name = file.Name });

                    content.Add(
                        content: fileContent,
                        name: "\"files\"",
                        fileName: file.Name);

                    upload = true;


                    Logger.LogInformation($"End prepare file: {file.Name}");
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, ex.Message);

                    _uploadResults.Add(
                        new()
                            {
                                FileName = file.Name,
                                ErrorMessage = ex.Message,
                                Uploaded = false
                            });
                }
            }

            if (upload)
            {
                try
                {
                    Logger.LogInformation("Begin upload files.");

                    var client = ClientFactory.CreateClient();
                    client.Timeout = TimeSpan.FromDays(1);
                    var response = await client.PostAsync(url, content);

                    Logger.LogInformation("End upload files.");

                    if (response.IsSuccessStatusCode)
                    {
                        var options = new JsonSerializerOptions
                            {
                                PropertyNameCaseInsensitive = true,
                            };

                        using var responseStream = await response.Content.ReadAsStreamAsync();

                        var newUploadResults = await JsonSerializer
                            .DeserializeAsync<IList<UploadResult>>(responseStream, options);

                        if (newUploadResults is not null)
                        {
                            _uploadResults = _uploadResults.Concat(newUploadResults).ToList();
                        }
                    }
                }
                catch(Exception ex)
                {
                     Logger.LogError(ex, ex.Message);
                }

                //response.EnsureSuccessStatusCode();

                //Logger.LogInformation("End upload files.");

                //var newUploadResults = await response.Content.ReadFromJsonAsync<IList<UploadResult>>();

                //if (newUploadResults is not null)
                //{
                //    _uploadResults = _uploadResults.Concat(newUploadResults).ToList();
                //}
            }
        }
        finally
        {
            content.Dispose();
        }
    }

    /// <summary>
    /// NOTE: this throws for some file types.
    /// </summary>
    public static string GetMimeType(IBrowserFile file)
    {
        var type = "text/plain";
        //try
        //{
        //    type = file.ContentType;
        //}
        //catch { }
        return type;
    }

    private static bool FileUploadMethod(IList<UploadResult> uploadResults, string? fileName, ILogger<FileUpload> logger, out UploadResult result)
    {
        result = uploadResults.SingleOrDefault(f => f.FileName == fileName) ?? new();

        if (!result.Uploaded)
        {
            logger.LogInformation("{FileName} not uploaded (Err: 5)", fileName);
            result.ErrorMessage = "Bad error happened! " + result.ErrorMessage;
        }

        return result.Uploaded;
    }

    private class File
    {
        public string? Name { get; set; }
    }

     public class UploadResult
    {
        public bool Uploaded { get; set; }
        public string? FileName { get; set; }
        public string? StoredFileName { get; set; }
        public string? ErrorMessage { get; set; }
    }
}