@page "/fileuploadAzureBlob"
@using System.IO
@using FileUpload_Samples.Services;
@using Microsoft.AspNetCore.Components.Forms;
@using System.Net.Http;
@using System.Threading.Tasks;
@using System.Diagnostics;
@using System.Threading
@using System.Text;
@using System.Xml.Linq;
@using System.Xml;
@inject ILogger<FileUploadChunked> Logger

<h1>Upload Files - Card Name</h1>

<p>
    <label>
        <InputFile type="file" OnChange="@LoadLocalFile" multiple />
    </label>
</p>

@if (isUploading)
{
    <p>Uploading @upload.UniqueFileName (<b>@upload.FileSizeInMB.ToString("F2")</b> MB), please wait ...</p>

    var progress = (100.0 * totalBytesRead / upload.FileSizeInBytes).ToString("0");

    <div class="progress">
        <div class="progress-bar" role="progressbar" style="@($"width: {progress}%")" aria-valuenow="@progress" aria-valuemin="0" aria-valuemax="100"></div>
    </div>
}

@if (!String.IsNullOrEmpty(result) && !hasBeenCancelled)
{
    <br/>
    @((MarkupString)result);
}

@if (_validationResults.Count > 0)
{
    <div class="card">
        <h4>Invalid files:</h4>
        <div class="card-body">
            <ul>
                @foreach (var file in _validationResults)
                {
                    <li>
                        File: @file.FileName
                        <br>
                       <ul>
                            @foreach (var error in file.Errors)
                            {
                                <li>
                                    <span>@error</span>
                                </li>
                            }
                        </ul>
                    </li>
                }
            </ul>
        </div>
    </div>
}

@code {

    private List<ValidationResult> _validationResults = new();
    CancellationTokenSource cancellation;
    Upload upload = new();

    bool isUploading = false;
    bool canCancel = false;
    bool hasBeenCancelled = false;
    long totalBytesRead = 0;
    string result = string.Empty;
    private int _maxAllowedFiles = int.MaxValue;

    async Task LoadLocalFile(InputFileChangeEventArgs e)
    {
        _validationResults.Clear();

        foreach (var file in e.GetMultipleFiles(_maxAllowedFiles))
        {
            upload.ChunkSizeInKB = 512; 
            upload.FileSizeInBytes = file.Size;
            upload.FileName = file.Name;

            await UploadFile(upload, file.OpenReadStream(upload.FileSizeInBytes));
        }
    }

    async Task UploadFile(Upload upload, Stream stream)
    {
        if (hasBeenCancelled)
        {
            return;
        }

        cancellation?.Dispose();
        cancellation = new CancellationTokenSource();
        canCancel = true;
        hasBeenCancelled = false;

        isUploading = true;
        totalBytesRead = 0;

        if (string.IsNullOrEmpty(upload.FileName))
            upload.UniqueFileName = Path.GetRandomFileName() + ".bin";
        else
            upload.UniqueFileName = Path.GetRandomFileName() + "-" + upload.FileName;

        Stopwatch sw = new();
        sw.Start();
        try
        {

            var sasUrl = "TODO: SAS here";
            await new AzureBlobService().UploadAsync(sasUrl, upload.FileName, stream, (p) =>
            {
                totalBytesRead = p;
                StateHasChanged();
            });
        }
        catch (OperationCanceledException)
        {
            hasBeenCancelled = true;
            await InvokeAsync(StateHasChanged);
            await Task.Delay(1);
        }
        catch (Exception ex)
        {   
            Logger.LogError(ex, ex.Message); 
        }
        finally
        {
            stream.Close();
            stream.Dispose();
            stream = null;
            canCancel = false;
        }
        sw.Stop();
        TimeSpan ts = sw.Elapsed;

        if (!hasBeenCancelled)
        {
            upload.Duration = String.Format("{0:00}:{1:00}.{2:00}", ts.Minutes, ts.Seconds, ts.Milliseconds / 10);
            upload.MegaBytesPerSeconds = upload.CalculateMegabytesPerSeconds(ts.TotalSeconds);

            result = "<h4>Result:</h4>";
            result += $"<p><b>{upload.FileSizeInMB.ToString("F2")}</b> MB upload of <b>{upload.ChunkSizeInKB}</b> KB completed in <b>{upload.Duration}</b> (mm:ss.ms)</p>";
            result += $"<p>Throughput: <b>{upload.MegaBytesPerSeconds.ToString("F2")}</b> MB/s</p>";
        }

        ResetForm();
    }

    private static async Task PutFile(Stream stream)
    {
        var blobUrl = "TODO: SAS here";

        var request = new HttpRequestMessage()
            {
                Method = HttpMethod.Put,
                RequestUri = new Uri(blobUrl)
            };

        using (var _client = new HttpClient())
        {
            _client.Timeout = TimeSpan.FromMinutes(30);
            var length = stream.Length.ToString();
            var streamContent = new StreamContent(stream);
            streamContent.Headers.Add("Content-Type", "application/zip");
            streamContent.Headers.Add("Content-Length", length);
            streamContent.Headers.Add("x-ms-blob-type", "BlockBlob");
            request.Content = streamContent;

            var response = await _client.SendAsync(request);

            response.EnsureSuccessStatusCode();
        }
    }

    static List<int> blockIds = new List<int>();

    private static async Task PutFileLarge(Stream stream, string fileName, int currentBlockId)
    {
        var blobUrl = "TODO: SAS here";

        var uriBuilder = new UriBuilder(blobUrl);
        //var currentBlockId = Convert.ToBase64String(Encoding.UTF8.GetBytes(Guid.NewGuid().ToString()));
        uriBuilder.Query = uriBuilder.Query.TrimStart('?') + string.Format("&comp=block&blockid={0}", currentBlockId);

        var request = new HttpRequestMessage()
            {
                Method = HttpMethod.Put,
                RequestUri = uriBuilder.Uri
            };

        using (var _client = new HttpClient())
        {
            var length = stream.Length.ToString();
            var streamContent = new StreamContent(stream);
            streamContent.Headers.Add("x-ms-blob-type", "BlockBlob");
            request.Content = streamContent;

            var response = await _client.SendAsync(request, HttpCompletionOption.ResponseHeadersRead);

            response.EnsureSuccessStatusCode();
        }

        blockIds.Add(currentBlockId);
    }

    private static async Task CommitBlockList()
    {
        var blobUrl = "TODO: SAS here";

        var uri = new Uri(string.Format("{0}&comp=blocklist", blobUrl));

        var request = new HttpRequestMessage()
            {
                Method = HttpMethod.Put,
                RequestUri = uri
            };

        using (var _client = new HttpClient())
        {
            using( var ms = new MemoryStream())
            {
                var streamContent = new StreamContent(ms);

                var document = new XDocument(
                   new XElement("BlockList",
                       from blockId in blockIds
                       select new XElement("Uncommitted", blockId)));
                var writer = XmlWriter.Create(ms, new XmlWriterSettings() { Encoding = Encoding.UTF8 });
                document.Save(writer);
                writer.Flush();

                request.Content = streamContent;

                var response = await _client.SendAsync(request);

                response.EnsureSuccessStatusCode();
            }
        }
    }

    public void ResetForm()
    {
        isUploading = false;
        upload.ChunkSizeInKB = 0;
        upload.Duration = string.Empty;
        upload.FileSizeInBytes = 0;
    }

    public async Task CancelUpload()
    {
        hasBeenCancelled = true;
        await InvokeAsync(StateHasChanged);
        await Task.Delay(1);
        cancellation.Cancel();
        // TODO: Delete uploaded file
    }

    public bool IsFileValid(string fileName, Stream stream)
    {
        var errors = new[]
        {
            "Extension not allowed!",
            "File too big!",
            "Invalid file type!"
        };

        var error = new ValidationResult { FileName = fileName, Errors = errors };

        _validationResults.Add(error);

        return true;
    }

    public class Upload
    {
        public string FileName { get; set; } = string.Empty;
        public string UniqueFileName { get; set; } = string.Empty;
        public long FileSizeInBytes { get; set; } = 0;
        public int ChunkSizeInKB { get; set; } = 0;
        public double MegaBytesPerSeconds { get; set; } = 0;
        public string Duration { get; set; } = string.Empty;

        public double FileSizeInMB
        {
            get
            {
                return FileSizeInBytes / (1024F * 1024F);
            }
        }

        public double CalculateMegabytesPerSeconds(double seconds)
        {
            double MBs = FileSizeInMB;
            return MBs / seconds;
        }
    }

    public class ValidationResult
    {
        public string FileName { get; set; }
        public IEnumerable<string> Errors { get; set; } = Enumerable.Empty<string>();
    }


}
