@page "/fileuploadChunked"
@using System.IO
@using Microsoft.AspNetCore.Components.Forms;
@using System.Net.Http;
@using System.Threading.Tasks;
@using System.Diagnostics;
@using System.Threading
@inject HttpClient client
@inject ILogger<FileUploadChunked> Logger

<h1>Upload Large Files</h1>

<p>
    <label>
        Upload up to @_maxAllowedFiles files:
        <InputFile type="file" OnChange="@LoadLocalFile" multiple />

        <!--
         TODO:   accept=".csv,.xlsx" 

        -->
    </label>
</p>

@if (isUploading)
{
    <p>Uploading @upload.UniqueFileName (<b>@upload.FileSizeInMB.ToString("F2")</b> MB), please wait ...</p>

    var progress = (100.0 * totalBytesRead / upload.FileSizeInBytes).ToString("0");

    <p>Progress (Chunk Size = @upload.ChunkSizeInKB KB)</p>

    <div class="progress">
        <div class="progress-bar" role="progressbar" style="@($"width: {progress}%")" aria-valuenow="@progress" aria-valuemin="0" aria-valuemax="100"></div>
    </div>
}

@if (!String.IsNullOrEmpty(result) && !hasBeenCancelled)
{
    @((MarkupString)result);
}

@code {
    CancellationTokenSource cancellation;
    Upload upload = new();

    int fileSelection = 0;
    bool fileSizeSelected = false;
    bool chunkSizeSelected = false;
    bool isCreatingfile = false;
    bool isUploading = false;
    bool canCancel = false;
    bool hasBeenCancelled = false;
    int totalBytesRead = 0;
    string result = string.Empty;
    private int _maxAllowedFiles = int.MaxValue;

    Task FileSelection(int value)
    {
        ResetForm();
        result = string.Empty;
        fileSelection = value;
        return Task.CompletedTask;
    }

    async Task LoadLocalFile(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles(_maxAllowedFiles))
        {
            upload.ChunkSizeInKB = 512; 
            upload.FileSizeInBytes = file.Size;
            upload.FileName = file.Name;

            using(var stream = file.OpenReadStream(upload.FileSizeInBytes))
            {
                await UploadFile(upload, stream);
            }
        }
    }

    async Task UploadFile(Upload upload, Stream stream)
    {
        if (upload.ChunkSizeInKB == 0 || hasBeenCancelled)
        {
            return;
        }

        cancellation?.Dispose();
        cancellation = new CancellationTokenSource();
        canCancel = true;
        chunkSizeSelected = false; // Disable upload button
        hasBeenCancelled = false;

        isUploading = true;
        totalBytesRead = 0;
        int bufferSize = 1024 * upload.ChunkSizeInKB; // bytes
        byte[] buffer = new byte[bufferSize];
        int bytesRead = 0;
        int counter = 0;
        var url = "https://localhost:5001/FilesaveChunked";

        if (string.IsNullOrEmpty(upload.FileName))
            upload.UniqueFileName = Path.GetRandomFileName() + ".bin";
        else
            upload.UniqueFileName = Path.GetRandomFileName() + "-" + upload.FileName;

        Stopwatch sw = new();
        sw.Start();
        try
        {
            while ((bytesRead = await stream.ReadAsync(buffer, cancellation.Token)) != 0)
            {
                counter++;
                totalBytesRead += bytesRead;
                using( var tmpMemoryStream = new MemoryStream(buffer, 0, bytesRead))
                {
                    using MultipartFormDataContent content = new();
                    content.Add(
                        content: new StreamContent(tmpMemoryStream, Convert.ToInt32(tmpMemoryStream.Length)),
                        name: "\"uploadFile\"",
                        fileName: upload.UniqueFileName
                        );
                    var response = await client.PostAsync(url, content);
                    response.EnsureSuccessStatusCode();

                    StateHasChanged();
                }
            };
        }
        catch (OperationCanceledException)
        {
            hasBeenCancelled = true;
            await InvokeAsync(StateHasChanged);
            await Task.Delay(1);
        }
        catch (Exception ex)
        {   
            Logger.LogError(ex, ex.Message); 
        }
        finally
        {
            stream.Close();
            stream.Dispose();
            stream = null;
            canCancel = false;
        }
        sw.Stop();
        TimeSpan ts = sw.Elapsed;

        if (!hasBeenCancelled)
        {
            upload.Duration = String.Format("{0:00}:{1:00}.{2:00}", ts.Minutes, ts.Seconds, ts.Milliseconds / 10);
            upload.MegaBytesPerSeconds = upload.CalculateMegabytesPerSeconds(ts.TotalSeconds);

            result = "<h4>Result:</h4>";
            result += $"<p><b>{upload.FileSizeInMB.ToString("F2")}</b> MB upload in {((counter == 1) ? "a chunk" : "chunks")} of <b>{upload.ChunkSizeInKB}</b> KB completed in <b>{upload.Duration}</b> (mm:ss.ms)</p>";
            result += $"<p>Throughput: <b>{upload.MegaBytesPerSeconds.ToString("F2")}</b> MB/s</p>";
        }

        ResetForm();
    }

    public void ResetForm()
    {
        chunkSizeSelected = false;
        fileSelection = 0;
        fileSizeSelected = false;
        isCreatingfile = false;
        isUploading = false;
        upload.ChunkSizeInKB = 0;
        upload.Duration = string.Empty;
        upload.FileSizeInBytes = 0;
    }

    public async Task CancelUpload()
    {
        hasBeenCancelled = true;
        await InvokeAsync(StateHasChanged);
        await Task.Delay(1);
        cancellation.Cancel();
        // TODO: Delete uploaded file
    }

    public class Upload
    {
        public string FileName { get; set; } = string.Empty;
        public string UniqueFileName { get; set; } = string.Empty;
        public long FileSizeInBytes { get; set; } = 0;
        public int ChunkSizeInKB { get; set; } = 0;
        public double MegaBytesPerSeconds { get; set; } = 0;
        public string Duration { get; set; } = string.Empty;

        public double FileSizeInMB
        {
            get
            {
                return FileSizeInBytes / (1024F * 1024F);
            }
        }

        public double CalculateMegabytesPerSeconds(double seconds)
        {
            double MBs = FileSizeInMB;
            return MBs / seconds;
        }
    }
}
