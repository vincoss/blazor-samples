@page "/scale-page"

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
     width="@WindowSizeSingleton.Width" height="@WindowSizeSingleton.Height">

    @if (WindowSizeSingleton.IsPortrait)
    {
    }
    else
    {
        <svg>

            <defs>
                <svg id="close" width="120" height="120" x="2968" y="0" viewBox="0 0 32 32">
                    <path d="M16 0c-8.836 0-16 7.163-16 16s7.163 16 16 16c8.837 0 16-7.163 16-16s-7.163-16-16-16zM16 30.032c-7.72 0-14-6.312-14-14.032s6.28-14 14-14 14 6.28 14 14-6.28 14.032-14 14.032zM21.657 10.344c-0.39-0.39-1.023-0.39-1.414 0l-4.242 4.242-4.242-4.242c-0.39-0.39-1.024-0.39-1.415 0s-0.39 1.024 0 1.414l4.242 4.242-4.242 4.242c-0.39 0.39-0.39 1.024 0 1.414s1.024 0.39 1.415 0l4.242-4.242 4.242 4.242c0.39 0.39 1.023 0.39 1.414 0s0.39-1.024 0-1.414l-4.242-4.242 4.242-4.242c0.391-0.391 0.391-1.024 0-1.414z"></path>
                </svg>
            </defs>

            <svg viewBox="0 0 3088 1440">
                <svg width="3088" height="1440">
                    <rect width="100%" height="100%" fill="pink" />
                    <rect width="1920" height="1080" fill="yellow" />
                    <rect width="1029.333333333" height="480" fill="green" />
                    <rect width="800" height="600" fill="blue" />
                    <rect width="640" height="480" fill="red" />

                    <use xlink:href="#close" />
                    <use xlink:href="#close" transform="scale(@ScaleX)" fill="gray" />
                    <use xlink:href="#close" transform="translate(-396 0) scale(0.75)" fill="green" />

                    <svg width="40" height="40" x="989.333333333" y="40" viewBox="0 0 32 32" fill="brown">
                        <path d="M16 0c-8.836 0-16 7.163-16 16s7.163 16 16 16c8.837 0 16-7.163 16-16s-7.163-16-16-16zM16 30.032c-7.72 0-14-6.312-14-14.032s6.28-14 14-14 14 6.28 14 14-6.28 14.032-14 14.032zM21.657 10.344c-0.39-0.39-1.023-0.39-1.414 0l-4.242 4.242-4.242-4.242c-0.39-0.39-1.024-0.39-1.415 0s-0.39 1.024 0 1.414l4.242 4.242-4.242 4.242c-0.39 0.39-0.39 1.024 0 1.414s1.024 0.39 1.415 0l4.242-4.242 4.242 4.242c0.39 0.39 1.023 0.39 1.414 0s0.39-1.024 0-1.414l-4.242-4.242 4.242-4.242c0.391-0.391 0.391-1.024 0-1.414z"></path>
                    </svg>

                    <svg width="100" height="100" x="540" y="0" viewBox="0 0 32 32" fill="gold">
                        <path d="M16 0c-8.836 0-16 7.163-16 16s7.163 16 16 16c8.837 0 16-7.163 16-16s-7.163-16-16-16zM16 30.032c-7.72 0-14-6.312-14-14.032s6.28-14 14-14 14 6.28 14 14-6.28 14.032-14 14.032zM21.657 10.344c-0.39-0.39-1.023-0.39-1.414 0l-4.242 4.242-4.242-4.242c-0.39-0.39-1.024-0.39-1.415 0s-0.39 1.024 0 1.414l4.242 4.242-4.242 4.242c-0.39 0.39-0.39 1.024 0 1.414s1.024 0.39 1.415 0l4.242-4.242 4.242 4.242c0.39 0.39 1.023 0.39 1.414 0s0.39-1.024 0-1.414l-4.242-4.242 4.242-4.242c0.391-0.391 0.391-1.024 0-1.414z"></path>
                    </svg>

                </svg>

            </svg>

        </svg>

    }

    <!-- Diagnostics -->

    <svg x="10" y="10" fill="black" height="75" width="180" @onclick="OnForceRedraw">
        <rect width="100%" height="100%" fill="#dcdcdc" />
        <text x="0" y="20">@string.Format($"Window Width:  {WindowSizeSingleton.Width}")</text>
        <text x="0" y="40">@string.Format($"Window Height: {WindowSizeSingleton.Height}")</text>
        <text x="0" y="40">@string.Format($"Scale X: {ScaleX}")</text>
    </svg>

</svg>

@layout BlankLayout
@implements IDisposable
@inject IWindowSize WindowSizeSingleton

@code
{
    private double ScaleX = 0.75D;
    private double TranslateX;
    private string Colour = "red";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        WindowSizeSingleton.PropertyChanged += OnWindowSizeSingleton; // TODO: can we move this into the Layout page? Window resize and orientaion change

    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if(firstRender)
        {
            return;
        }

        ScaleX = 0.75D;
    }

    private async void OnWindowSizeSingleton(object? sender, EventArgs e)
    {
        //  ScaleX = CalculateScale();

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        WindowSizeSingleton.PropertyChanged -= OnWindowSizeSingleton;
    }

    private float CalculateScale()
    {
        var minD = (float)Math.Min(3088, 1440);
        var minN = (float)Math.Min(WindowSizeSingleton.Width, WindowSizeSingleton.Height);

        var a = minD / minN;
        var b = minN / minD;

        if (minD < minN)
        {
            return 0.75F;
        }
        return 0.75F;

    }

    private void OnForceRedraw()
    {
        StateHasChanged();
    }
}