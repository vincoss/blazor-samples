@page "/content-scale"
@implements IDisposable
@inject HelperJsInterop BS;
@inject ConsoleJsInterop Logger;

<h3>WindowSizePage</h3>

<svg xmlns="http://www.w3.org/2000/svg"
     height="100%" width="100%" tabindex="0" fill="none">

	<rect width="100%" height="100%" fill="blue" fill-opacity="20%"/>

	<!-- Diagnostics temp only -->
	<svg x="10" y="10" fill="black" height="80" width="90%">
		<rect width="100%" height="100%" fill="pink" />
        <text x="0" y="20">@string.Format($"Window Width:  {WindowInnerWidth}")</text>
        <text x="0" y="40">@string.Format($"Window Height: {WindowInnerHeight}")</text>
	</svg>

	<Close Dx="200" Dy="200" Width="@_itemWidth" Height="@_itemHeight"/>

</svg>

@code {

    // TODO: remove project BlazorApp_Svg_Samples

    private double _userScale = 1D;
    private double _itemWidth = 0D;
    private double _itemHeight = 0D;
    private double _itemDefaultWidth = 100D;
    private double _itemDefaultScale = 0.1D;

    private int WindowInnerHeight = 0;
    private int WindowInnerWidth = 0;

    protected override async Task OnInitializedAsync()
    {
        await Logger.WriteLine($"{nameof(OnInitializedAsync)}");

        BS.OnResize += BrowserHasResized;
        await BS.Initialize();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Logger.WriteLine($"{nameof(OnAfterRenderAsync)} - firstRender: {firstRender}");

        if(firstRender)
        {
            WindowInnerHeight = await BS.GetInnerHeight();
            WindowInnerWidth = await BS.GetInnerWidth();
        }

        Calculate(); // calculate object diff

    }

    private async Task BrowserHasResized()
    {
        WindowInnerHeight = await BS.GetInnerHeight();
        WindowInnerWidth = await BS.GetInnerWidth();

        StateHasChanged();
    }

    public async void Dispose()
    {
        BS.OnResize -= BrowserHasResized;
        await BS.DisposeAsync();
    }

    private void Calculate()
    {
        var min = Math.Min(WindowInnerWidth, WindowInnerHeight);
        var scale = (min * _itemDefaultScale) / 100;
        _itemWidth = _itemDefaultWidth * scale;
        _itemHeight = _itemDefaultWidth * scale;
    }
}