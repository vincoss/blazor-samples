@page "/window-size"
@implements IDisposable
@inject HelperJsInterop BS;
@inject ConsoleJsInterop Logger;

<h5>WindowSizePage, Element Height and window resize event </h5>

<div>
    <div @ref="mainDiv" style="background-color: pink">
        <p><strong>Window Inner Width: </strong> @InnerWidth</p>
        <p><strong>Window Inner Height: </strong> @InnerHeight</p>
        <p><strong>Element Width: </strong>@_parentRectangle.Width</p>
        <p><strong>Element Height: </strong>@_parentRectangle.Height</p>
    </div>
</div>

@code {

    private ElementReference mainDiv;
    private int InnerHeight = 0;
    private int InnerWidth = 0;
    private BoundingClientRect _parentRectangle = new BoundingClientRect();

    protected override async Task OnInitializedAsync()
    {
        await Logger.WriteLine($"{nameof(OnInitializedAsync)}");

        BS.OnResize += BrowserHasResized;
        await BS.Initialize();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Logger.WriteLine($"{nameof(OnAfterRenderAsync)} - firstRender: {firstRender}");

        if(firstRender)
        {
            await mainDiv.FocusAsync();
            InnerHeight = await BS.GetInnerHeight();
            InnerWidth = await BS.GetInnerWidth();
            _parentRectangle = await BS.GetElementDOMRect(mainDiv);
        }
    }

    private async Task BrowserHasResized()
    {
        InnerHeight = await BS.GetInnerHeight();
        InnerWidth = await BS.GetInnerWidth();
        _parentRectangle = await BS.GetElementDOMRect(mainDiv);

        StateHasChanged();
    }

    public async void Dispose()
    {
        BS.OnResize -= BrowserHasResized;
        await BS.DisposeAsync();
    }
}