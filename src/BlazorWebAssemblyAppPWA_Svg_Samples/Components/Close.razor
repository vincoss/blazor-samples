@* <svg width="@_sizeDelta.X" height="@_sizeDelta.Y" x="@_anchorPosition.X" y="@_anchorPosition.Y">
	<svg viewBox="0 0 32 32" fill="gold">
		<rect width="100%" height="100%" fill="red" fill-opacity="50%" />
		<path d="M16 0c-8.836 0-16 7.163-16 16s7.163 16 16 16c8.837 0 16-7.163 16-16s-7.163-16-16-16zM16 30.032c-7.72 0-14-6.312-14-14.032s6.28-14 14-14 14 6.28 14 14-6.28 14.032-14 14.032zM21.657 10.344c-0.39-0.39-1.023-0.39-1.414 0l-4.242 4.242-4.242-4.242c-0.39-0.39-1.024-0.39-1.415 0s-0.39 1.024 0 1.414l4.242 4.242-4.242 4.242c-0.39 0.39-0.39 1.024 0 1.414s1.024 0.39 1.415 0l4.242-4.242 4.242 4.242c0.39 0.39 1.023 0.39 1.414 0s0.39-1.024 0-1.414l-4.242-4.242 4.242-4.242c0.391-0.391 0.391-1.024 0-1.414z"></path>
	</svg>
</svg> *@

<svg width="@_sizeDelta.X" height="@_sizeDelta.Y" x="@_anchorPosition.X" y="@_anchorPosition.Y" viewBox="0 0 32 32" fill="gray">
	<path d="M16 0c-8.836 0-16 7.163-16 16s7.163 16 16 16c8.837 0 16-7.163 16-16s-7.163-16-16-16zM16 30.032c-7.72 0-14-6.312-14-14.032s6.28-14 14-14 14 6.28 14 14-6.28 14.032-14 14.032zM21.657 10.344c-0.39-0.39-1.023-0.39-1.414 0l-4.242 4.242-4.242-4.242c-0.39-0.39-1.024-0.39-1.415 0s-0.39 1.024 0 1.414l4.242 4.242-4.242 4.242c-0.39 0.39-0.39 1.024 0 1.414s1.024 0.39 1.415 0l4.242-4.242 4.242 4.242c0.39 0.39 1.023 0.39 1.414 0s0.39-1.024 0-1.414l-4.242-4.242 4.242-4.242c0.391-0.391 0.391-1.024 0-1.414z"></path>
</svg>

@implements IDisposable
@inject IWindowSize WindowSizeSingleton

@code {

	protected override void OnInitialized()
	{
		base.OnInitialized();
		WindowSizeSingleton.PropertyChanged += OnWindowSizeSingleton; // TODO: can we move this into the Layout page or componentBase? Window resize and orientaion change

		_sizeDelta = new Vector2(Width, Height);
		_anchorPosition = new Vector2(X, Y);

		AdaptToDifferentAspectRatio();
	}

	private async void OnWindowSizeSingleton(object? sender, EventArgs e)
	{
		AdaptToDifferentAspectRatio();
		await InvokeAsync(StateHasChanged);
	}

	public void Dispose()
	{
		WindowSizeSingleton.PropertyChanged -= OnWindowSizeSingleton;
	}

	[Parameter]
	public float X { get; set; } = 0;

	[Parameter]
	public float Y { get; set; } = 0;

	[Parameter]
	public float Width { get; set; } = 0;

	[Parameter]
	public float Height { get; set; } = 0;

	[Parameter]
	public bool PreserveAspect { get; set; } = true;

	private Vector2 _sizeDelta;
	private Vector2 _anchorPosition;

	public void AdaptToDifferentAspectRatio()
	{
		float screenWidth = (float)WindowSizeSingleton.Width;
		float screenHeight = (float)WindowSizeSingleton.Height;
		float itemWidth = 10;
		float itemHeight = 10;
		bool preserveAspect = false;

		float offsetX = 85F;
		float offsetY = 0F;

		_sizeDelta = new Vector2(screenWidth * itemWidth / 100, ((preserveAspect) ? screenWidth * itemWidth : screenHeight * itemHeight) / 100);
		_anchorPosition = new Vector2(screenWidth * offsetX / 100, screenHeight * offsetY / 100);
	}
}
