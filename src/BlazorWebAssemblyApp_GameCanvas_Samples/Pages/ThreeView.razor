@page "/three"
@using System.Timers

<PageTitle>Moving canvas sample</PageTitle>

<h3>Moving canvas sample</h3>

<div style="background-color: darkslategrey; width: 80vw; height: 80vh; margin-top:10px;" tabindex="0" @ref="mainDiv">
     <div style="color: white; top: 0px; left: 0px; width: 100px; height: 100px; position: relative; background-color:aquamarine;overflow: hidden; ">
                <p>test</p>
     </div>
      <div style="color: white; top: 100px; left: 100px; width: 100px; height: 100px; position: relative; background-color:aquamarine;overflow: hidden; ">
                <p>test</p>
     </div>
      <div style="color: white; top: 200px; left: 200px; width: 100px; height: 100px; position: relative; background-color:aquamarine;overflow: hidden; ">
                <p>test</p>
     </div>

   @*   @foreach (var item in _items)
        {
            <div style="color: white; top: @(item.Y)px; left: @(item.X)px; width: @(item.Width)px; height:@(item.Height)px; position: relative;background-color:aquamarine;">
                <p>test</p>
                <p>@(item.Y)</p>
                <p>@(item.X)</p>
            </div>
        }*@
</div>

@code {

    private Timer _timer;
    private ElementReference mainDiv;
    private IList<Item> _items = Item.Start();

    protected override Task OnInitializedAsync()
    {
        _timer = new Timer();
        _timer.Interval = 100;
        _timer.Elapsed += TimerElapsed;
        _timer.AutoReset = true;
        _timer.Enabled = true;        

        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await mainDiv.FocusAsync();
        }
    }


    private void TimerElapsed(Object source, ElapsedEventArgs e)
    {
        Console.WriteLine($"Tick {e.SignalTime}, items: {_items.Count}");

        Update();
        Draw();
    }

    private void Draw() => this.StateHasChanged();


    public void Update()
    {
        var last = _items[_items.Count - 1];

        if (last.Y > last.Height)
        {
            _items.Add(new Item());
        }

        foreach (var item in _items)
        {
            item.Y++;
        }
    }

    public class Item
    {
        public int X { get; set; }
        public int Y { get; set; } = 0;

        public int Height { get; set; } = 100; // this must be proportional to screen size
        public int Width { get; set; } = 100;// this must be proportional to screen size

        public static IList<Item> Start()
        {
            var items = new List<Item>();
            items.Add(new Item());
            return items;
        }

        public override string ToString()
        {
            return $"X: {X}, Y: {Y}";
        }
    }
}
