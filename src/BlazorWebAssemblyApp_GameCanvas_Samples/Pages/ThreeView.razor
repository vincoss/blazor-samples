@page "/three"
@using System.Timers
@inject IJSRuntime JS;

<PageTitle>Moving canvas sample SVG</PageTitle>

<div @ref="mainDiv" style="width: 80vw; height: 80vh; margin-top:10px;" tabindex="0">
    <p>Width: @_parentRectangle.Width, Height: @_parentRectangle.Height</p>
    <svg width="100%" height="100%" xmlns="http://www.w3.org/2000/svg">
	    <rect width="100%" height="100%" fill="#dcdcdc" />

        @foreach (var item in _items)
        {
           <svg x="@item.X" y="@item.Y" height="@ItemWidth" width="@ItemWidth" xmlns="http://www.w3.org/2000/svg">
               
	          <rect width="100%" height="100%" fill="blue" />
            
              <text x="50%" y="50%" fill="red"
                    dominant-baseline="middle" text-anchor="middle"
                    font-size="200%" font-weight="bold">@item.Y</text>
            </svg>
        }

    </svg>
    <p>Item count: @_items.Count</p>
</div>

@code {

    private Timer _timer;
    private ElementReference mainDiv;
    private BoundingClientRect _parentRectangle = new BoundingClientRect();
    private int x = 0;
    private int y = 0;
    private IList<Item> _items = new List<Item>();
    private const int ItemWidth = 100;
    private static Random _random = new Random();

    protected override Task OnInitializedAsync()
    {
        _timer = new Timer();
        _timer.Interval = 50;
        _timer.Elapsed += TimerElapsed;
        _timer.AutoReset = true;
        _timer.Enabled = true;        

        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await mainDiv.FocusAsync();
        }

        //  NOTE: Not sure about performace
        var args = new object[] { mainDiv };
        _parentRectangle = await JS.InvokeAsync<BoundingClientRect>("MyDOMGetBoundingClientRect", args);
    }

    private void TimerElapsed(Object source, ElapsedEventArgs e)
    {
        Console.WriteLine($"Tick {e.SignalTime}");

        Update();
        Draw();
    }

    private void Draw() => this.StateHasChanged();

    public void Update()
    {
        // Get new if already mowed enough

        var last = _items.LastOrDefault();
        if(last == null || last.Y >= 200)
        {
            _items.Add(Get());
        }

        // Update position

        for(int i = 0; i < _items.Count; i++)
        {
            var item = _items[i];
            item.Y = item.Y + 2;

            if(item.Y >= _parentRectangle.Height)
            {
                _items.Remove(item);
            }
        }
    }

    private Item Get()
    {
        const int margin = 10;
        var item = new Item();
        item.X = _random.Next(margin, ((int)_parentRectangle.Width) - (ItemWidth + margin));

        return item;
    }


    public class BoundingClientRect
    {
        public double X { get; set; }
        public double Y { get; set; }
        public double Width { get; set; }
        public double Height { get; set; }
        public double Top { get; set; }
        public double Right { get; set; }
        public double Bottom { get; set; }
        public double Left { get; set; }
    }

    public class Item
    {
        public int Y { get; set; }
        public int X { get; set; }
    }

}
