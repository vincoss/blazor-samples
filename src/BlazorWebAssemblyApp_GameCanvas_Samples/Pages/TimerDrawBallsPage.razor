@page "/TimerDrawBallsPage"

<PageTitle>TimerDrawBallsPage</PageTitle>

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
     height="500" width="500" tabindex="0">

    <rect width="100%" height="100%" fill="blue" fill-opacity="20%" />

    @if (Field != null)
    {
        @foreach (var item in Field.Balls)
        {
            <circle cx="@item.X" cy="@item.Y" r="@item.Radius" fill="rgb(@item.R,@item.G,@item.B)" />
        }
    }

    <svg x="10" y="10" height="100" width="100">
        <svg viewBox="0, 0, 200, 100" preserveAspectRatio="xMidYMax meet">
            <svg width="200" height="100" fill="black">
                <text x="50%" y="50%" font-weight="bold" font-size="200%" dominant-baseline="central" text-anchor="middle">Count: @Field?.Balls.Count()</text>
            </svg>
        </svg>
    </svg>

</svg>

@code {

    private BallField Field;
    private Timer _timer;
    private int size = 500;

    protected override Task OnInitializedAsync()
    {
        _timer = new Timer();
        _timer.Interval = 20;
        _timer.Elapsed += TimerElapsed;
        _timer.AutoReset = true;
        _timer.Enabled = true;

        Field = new BallField(100);
        Field.Randomize(size, size);

        return base.OnInitializedAsync();
    }

    private void TimerElapsed(Object source, ElapsedEventArgs e)
    {
        Field.Advance(10, size, size);
        Draw();
    }

    private void Draw()
    {
        InvokeAsync(() =>
        {
            this.StateHasChanged();
        });
    }
}
