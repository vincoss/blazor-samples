
<!--
    https://docs.microsoft.com/en-us/aspnet/core/blazor/components/event-handling?view=aspnetcore-6.0
-->

@page "/eventhandlerspage"
@inject  HttpClient Http

<button @onclick="OnClick">Click me!</button>
<button @onclick="OnClickMouse">Click me!</button>

@foreach (var buttonLabel in buttonLabels)
{
    <button @onclick='(() => Console.WriteLine($"Button clicked {buttonLabel}") )'>@buttonLabel</button>
}

<button @onclick="OnClickAsync">Click me!</button>

<button @onclick="ShowMessage">Get message</button>

@if (showMessage)
{
    @if (message == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <p>The message is: @message</p>
    }
}

<button class="btn btn-primary" @onclick="OnClickParameter">Click me!</button>
<button @onclick="(() => OnPassValue(111))">Pass Argument</button>

<div style="height:200px;width:200px;background-color:palegoldenrod" @ontouchend="OnTouchend">

</div>

@code {

    bool showMessage = false;
    string message;

    private IEnumerable<string> buttonLabels = new[]
    {
            "Milk", "Bread", "Butter"
    };

    [Parameter]
    public EventCallback<MouseEventArgs> OnClickParameter { get; set; }

    void OnClick()
    {
        Console.WriteLine("The button was clicked!");
    }

    void OnClickMouse(MouseEventArgs e)
    {
        Console.WriteLine($"Mouse clicked at {e.ScreenX}, {e.ScreenY}.");
    }

    async Task OnClickAsync()
    {
        var result = await Http.GetAsync("api/values");
    }

    public async Task ShowMessage()
    {
        showMessage = true;
        await Task.Delay(3000);
        message = "Hi there.";
    }

    private void OnPassValue(int value)
    {

    }

    void OnTouchend(TouchEventArgs e)
    {
        var sb = new StringBuilder();
        sb.AppendLine(nameof(OnTouchend));
        sb.AppendLine($"{nameof(e.Detail)}-{e.Detail}");
        sb.AppendLine($"{nameof(e.Touches)}-{e.Touches}");
        sb.AppendLine($"{nameof(e.TargetTouches)}-{e.TargetTouches}");
        sb.AppendLine($"{nameof(e.ChangedTouches)}-{e.ChangedTouches}");
        sb.AppendLine($"{nameof(e.CtrlKey)}-{e.CtrlKey}");
        sb.AppendLine($"{nameof(e.ShiftKey)}-{e.ShiftKey}");
        sb.AppendLine($"{nameof(e.AltKey)}-{e.AltKey}");
        sb.AppendLine($"{nameof(e.MetaKey)}-{e.MetaKey}");
        sb.AppendLine($"{nameof(e.Type)}-{e.Type}");


        Console.WriteLine(sb.ToString());
    }
}